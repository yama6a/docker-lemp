version: '2'

networks:
  net:

volumes:
  phpmyadmin-html:
  mysql-persistence:
  mariadb-persistence:
  postgres-persistence:
  dynamodb-persistence:
  composer-cache:
  composer-home:

services:
  nginx:
    image: nginx:1.23.3-alpine # if you change the version here, also change it in the k8s deployment!
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_nginx"
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ../src:/code:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php-fpm
    networks:
      - net

  dynamodb:
    image: amazon/dynamodb-local:1.20.0
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_dynamodb"
    hostname: dynamodb
    restart: always
    volumes:
      - dynamodb-persistence:/home/dynamodblocal/data:rw
    ports:
      - "8000:8000"
    user: root # required to access mounted file system, because this emulator is trash
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/"
    networks:
      - net

  postgres:
    image: postgres:14.5-alpine # ensure this matches the terraform-setup's version!
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_postgres"
    volumes:
      - postgres-persistence:/var/lib/postgresql/data:rw
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - net

  mariadb:
    image: mariadb:10.6 # ensure this matches the terraform-setup's version!
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_mariadb"
    volumes:
      - mariadb-persistence:/var/lib/mysql:rw
    ports:
      - "${MARIADB_PORT}:3306"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_DATABASE: ${MARIADB_DATABASE}
      MYSQL_USER: ${MARIADB_USER}
      MYSQL_PASSWORD: ${MARIADB_PASSWORD}
    networks:
      - net

  mysql:
    image: mysql:8.0 # ensure this matches the terraform-setup's version!
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_mysql"
    volumes:
      - mysql-persistence:/var/lib/mysql:rw
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro # remove mount to disable mem-optimization (see .docker/mysql/my.cnf)
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - net

  php-fpm:
    build:
      dockerfile: ./php-fpm/Dockerfile
      context: .
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_php_fpm"
    volumes:
      - ../src:/code:ro # nothing should have access to modify source-code. Use separate mount for FS-cache, uploaded files, etc.!
    environment:
      SERVICE_NAME: ${COMPOSE_PROJECT_NAME}
      EVENT_BUS_NAME: ${COMPOSE_PROJECT_NAME}
      SQS_EVENT_QUEUE_URL: http://elasticmq:9324/queue/event-queue.fifo
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MARIADB_HOST: mariadb
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      DYNAMODB_ENDPOINT: ${DYNAMODB_ENDPOINT}
      MEMCACHED_HOST: memcached
      MEMCACHED_PORT: ${MEMCACHED_PORT}
    networks:
      - net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_phpmyadmin"
    volumes:
      - ./phpmyadmin/config.user.inc.php:/etc/phpmyadmin/config.user.inc.php:ro
      - phpmyadmin-html:/var/www/html/:rw
    ports:
      - "${PMA_PORT}:80"
    environment:
      PMA_ARBITRARY: 0
      MYSQL_HOST: "mysql"
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
      MARIADB_HOST: "mariadb"
    depends_on:
      - mysql
      - mariadb
    networks:
      - net

  memcached:
    image: memcached:1.6.18-alpine
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_memcached"
    networks:
      - net

  composer:
    image: prooph/composer:8.1 # remember that this version needs to match the php-fpm image-version!
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_composer"
    restart: 'no'
    command: "install"
    environment:
      COMPOSER_CACHE_DIR: /tmp/composer-cache
      COMPOSER_HOME: /tmp/composer-home
    volumes:
      - composer-cache:/tmp/composer-cache
      - ${COMPOSER_HOME:-composer-home}:/tmp/composer-home # saves composer config in docker volume, if var is not set.

      # Composer only needs write-access to /vendor, composer.json & composer.lock.
      # For PSR-4 / PSR-0 auto-loading, it will need read-only access to the rest of the code base, though.
      - ../src:/app:ro
      - ../src/composer.json:/app/composer.json:rw
      - ../src/composer.lock:/app/composer.lock:rw
      - ../src/vendor:/app/vendor:rw
    networks:
      - net

  elasticmq:
    image: softwaremill/elasticmq:1.3.14
    container_name: "${COMPOSE_PROJECT_NAME}_ctr_elasticmq"
    volumes:
      - ./elasticmq/config.conf:/opt/elasticmq.conf
    ports:
      - "9324:9324"
    networks:
      - net
